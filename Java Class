SimpleRandomSentences.java

import java.util.*;

import java.lang.*;
import java.io.*;

class SimpleRandomSentences {

static final String[] conjunction = { "and", "or", "but", "because"};

static final String[] proper_noun = { "Fred", "Jane", "Richard Nixon","Miss America"};

static final String[] common_noun = { "man", "woman", "fish", "elephant", "unicorn"};   

static final String[] determiner = { "a", "the", "every", "some"};

static final String[] adjective = { "big", "tiny", "pretty", "bald"};

static final String[] intransitive_verb = { "runs", "jumps", "talks", "sleeps"};

static final String[] transitive_verb = { "loves", "hates", "sees", "knows", "looks for", "finds"};

public static void main(String[] args) {
while (true) {
randomSentence();
System.out.println(".\n\n");
try {
Thread.sleep(3000);
}
catch (InterruptedException e) {
}
}
}

static void randomSentence() {
randomNounPhrase();
randomVerbPhrase();
if (Math.random() > 0.75) {
System.out.print(" " + randomItem(conjunction));
randomSentence();
}
}

static void randomNounPhrase() {


if (Math.random() > 0.75)
System.out.print(" " + randomItem(proper_noun));
else
{
System.out.print(" " + randomItem(determiner));
if (Math.random() > 0.5)
System.out.print(" " + randomItem(adjective)+".");
System.out.print(" " + randomItem(common_noun));
if (Math.random() > 0.5){
System.out.print(" who" );
randomVerbPhrase();
}
}
}

static void randomVerbPhrase() {

if (Math.random() > 0.75)
System.out.print(" " + randomItem(intransitive_verb));
else if (Math.random() > 0.50) {
System.out.print(" " + randomItem(transitive_verb));
randomNounPhrase();
}
else if (Math.random() > 0.25)
System.out.print(" is " + randomItem(adjective));
else {
System.out.print(" believes that");
randomNounPhrase();
randomVerbPhrase();
}
}

static String randomItem(String[] listOfStrings){
return listOfStrings[(int)(Math.random()*listOfStrings.length)];
}

}

PART-2:

FamousFractals Class

import java.awt.*;

import java.awt.event.*;

import javax.swing.*;

public class FamousFractals extends JFrame implements ActionListener {

   public static void main(String[] args) {

       JFrame window = new FamousFractals();

       window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

       window.setLocation(50, 50);

       window.setVisible(true);

   }

  

   private int currentNumberOfPoints;

   private InputCanvas input;

   private DisplayCanvas display;

   private JComboBox pointCountSelect;

   private JComboBox recursionLevelSelect;

  

   public FamousFractals() {

      

       super("Famous Fractals");

       pointCountSelect = new JComboBox();

       recursionLevelSelect = new JComboBox();

       display = new DisplayCanvas();

       input = new InputCanvas(display);

       input.setPreferredSize(new Dimension(500, 500));

      display.setPreferredSize(new Dimension(500, 500));

       JPanel canvases = new JPanel();

       canvases.setBackground(Color.DARK_GRAY);

       canvases.setLayout(new GridLayout(1,2,5,5));

       canvases.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 5));

       canvases.add(input);

       canvases.add(display);

       JPanel bottom = new JPanel();

       bottom.add(new JLabel("Number of Points: "));

       bottom.add(pointCountSelect);

       for (int i = 3; i < 10; i++)

           pointCountSelect.addItem("" + i);

       pointCountSelect.setSelectedIndex(2);

       currentNumberOfPoints = 5;

       input.setPointCount(5);

       pointCountSelect.addActionListener( new ActionListener() {

           public void actionPerformed(ActionEvent evt) {

               if (currentNumberOfPoints != pointCountSelect.getSelectedIndex() + 1) {

                   currentNumberOfPoints = pointCountSelect.getSelectedIndex() + 3;

                   input.setPointCount(currentNumberOfPoints);

                   checkMaxRecursionLevel();

                   display.setRecursionLevel(recursionLevelSelect.getSelectedIndex() + 1);

;               }

           }

       });

       JButton clear = new JButton("Clear");

       bottom.add(Box.createHorizontalStrut(40));

       bottom.add(clear);

       clear.addActionListener( new ActionListener() {

           public void actionPerformed(ActionEvent e) {

               input.setPointCount(currentNumberOfPoints);

           }

       });

       bottom.add(Box.createHorizontalStrut(40));

       bottom.add(new JLabel("Recursion Level"));

       bottom.add(recursionLevelSelect);

       checkMaxRecursionLevel();

       recursionLevelSelect.setSelectedIndex(3);

       display.setRecursionLevel(4);

       recursionLevelSelect.addActionListener( new ActionListener() {

           public void actionPerformed(ActionEvent evt) {

               display.setRecursionLevel(recursionLevelSelect.getSelectedIndex() + 1);

           }

       });

       getContentPane().setLayout(new BorderLayout());

       getContentPane().add(canvases, BorderLayout.CENTER);

       getContentPane().add(bottom,BorderLayout.SOUTH);

       setJMenuBar(makeMenus());

       pack();

       setResizable(false);

   }

  

   private void checkMaxRecursionLevel() {

      int max   = (int)(Math.log(100000)/Math.log(currentNumberOfPoints-1));

      int curMax = recursionLevelSelect.getItemCount();

      if (curMax < max) {

         for (int i = curMax+1; i <= max; i++)

             recursionLevelSelect.addItem("" + i);

      }

      else if (curMax > max) {

         int selected = recursionLevelSelect.getSelectedIndex();

         if (selected >= max)

             recursionLevelSelect.setSelectedIndex(max-1);

         for (int i = curMax-1; i >= max; i--)

             recursionLevelSelect.removeItemAt(i);

      }

   }

  

   private JMenuBar makeMenus() {

       JMenuBar menubar = new JMenuBar();

       JMenu menu = new JMenu("Examples");

       menubar.add(menu);

       String[] itemList = new String[] {

               "Koch Curve", "Square Koch Curve", "Dragon Curve", "C-Curve", "Sierpinski Triangle",

               null, "Quit"

       };

       for (String cmd : itemList) {

           if (cmd == null) {

               menu.addSeparator();

           }

           else {

               JMenuItem item = new JMenuItem(cmd);

               item.addActionListener(this);

               menu.add(item);

           }

       }

       return menubar;

   }

  

   public void actionPerformed(ActionEvent evt) {

       String cmd = evt.getActionCommand();

       if (cmd.equals("Quit"))

           System.exit(0);

       else if (cmd.equals("Koch Curve")) {

           int height = (int)(400/Math.sqrt(3));

           int[] coords = { 50,250, 50+400/3,250, 250,350-height, 50+800/3,250, 450,250 };

           installExample(7,coords);

       }

       else if (cmd.equals("Square Koch Curve")) {

           int[] coords = { 50,250, 50+400/3,250, 50+400/3,250-400/3, 50+800/3,250-400/3, 50+800/3,250, 450,250 };

           installExample(6, coords);

       }

       else if (cmd.equals("Dragon Curve")) {

           int h = (int)(400/(2*Math.sqrt(3)));

           int[] coords = { 50,250, 250,250-h, 250,250+h, 450,250};

           installExample(8, coords);

       }

       else if (cmd.equals("C-Curve")) {

           int h = 120;

           int[] coords = {130,350, 250,350-h, 370,350};

           installExample(14, coords);

       }

       else if (cmd.equals("Sierpinski Triangle")) {

           int h = (int)(400*Math.sqrt(3)/4);

           int[] coords = { 50,400, 250,400, 150,400-h, 350,400-h, 250,400, 450,400};

           installExample(7, coords);

       }

   }

  

   private void installExample(int recursionLevel, int[] coordinates) {

       int pointCt = coordinates.length / 2;

       currentNumberOfPoints = pointCt;

       pointCountSelect.setSelectedIndex(pointCt - 3);

       input.install(coordinates);

       checkMaxRecursionLevel();

       display.setRecursionLevel(recursionLevel);

       recursionLevelSelect.setSelectedIndex(recursionLevel-1);

   }

}

InputCanvas? Class

import java.awt.Color;

import java.awt.Graphics;

import java.awt.Point;

import java.awt.event.MouseEvent;

import java.awt.event.MouseListener;

import java.awt.event.MouseMotionListener;

import javax.swing.JPanel;

public class InputCanvas extends JPanel implements MouseListener, MouseMotionListener {

   private Point[] points;

   private DisplayCanvas display;

   public InputCanvas(DisplayCanvas canvas) {

       display = canvas;

       setBackground(Color.WHITE);

       addMouseListener(this);

       addMouseMotionListener(this);

   }

   public void setPointCount(int n) {

       points = new Point[n];

       for (int i = 0; i < n; i++)

           points[i] = new Point(50 + i * 400 / (n - 1), 250);

       repaint();

       display.setPoints(points);

   }

   protected void paintComponent(Graphics g) {

       super.paintComponent(g);

       if (points != null) {

           g.setColor(Color.BLACK);

           for (int i = 1; i < points.length; i++)

               g.drawLine(points[(i - 1)].x, points[(i - 1)].y, points[i].x, points[i].y);

           for (int i = 0; i < points.length; i++) {

               g.setColor((i == 0) || (i == points.length - 1) ? Color.ORANGE : Color.GREEN);

               g.fillOval(points[i].x - 5, points[i].y - 5, 9, 9);

           }

       }

   }

   private int pointDragged = -1;

   public void mousePressed(MouseEvent e) {

       if (pointDragged > 0)

           return;

       int i = e.getX();

       int j = e.getY();

       for (int k = 0; k < points.length; k++) {

           int m = points[k].x;

           int n = points[k].y;

           int i1 = (m - i) * (m - i) + (n - j) * (n - j);

           if (i1 <= 36) {

               pointDragged = k;

               return;

           }

       }

   }

   public void mouseDragged(MouseEvent e) {

       if (pointDragged >= 0) {

           int i = e.getX();

           int j = e.getY();

           i = Math.min(500, Math.max(0, i));

           j = Math.min(500, Math.max(0, j));

           if ((i != points[pointDragged].x) || (j != points[pointDragged].y)) {

               points[pointDragged].setLocation(i, j);

               display.setPoints(points);

               repaint();

           }

       }

   }

   public void mouseReleased(MouseEvent e) {

       pointDragged = -1;

   }

   public void mouseClicked(MouseEvent e) {

   }

   public void mouseEntered(MouseEvent e) {

   }

   public void mouseExited(MouseEvent e) {

   }

   public void mouseMoved(MouseEvent e) {

   }

   public void install(int[] arr) {

       int i = arr.length / 2;

       points = new Point[i];

       for (int j = 0; j < i; j++) {

           points[j] = new Point(arr[(2 * j)], arr[(2 * j + 1)]);

       }

       repaint();

       display.setPoints(points);

   }

}

DisplayCanvas Class

import java.awt.Graphics;

import java.awt.Point;

import javax.swing.JPanel;

public class DisplayCanvas extends JPanel {

      private int x1;

      private int y1;

      private int x2;

      private int y2;

      private double[] s;

      private double[] t;

      private int recursionLevel;

  

      public DisplayCanvas() {

      setBackground(java.awt.Color.WHITE);

      }

  

      public void setPoints(Point[] pointArray) {

      x1 = pointArray[0].x;

      y1 = pointArray[0].y;

      x2 = pointArray[pointArray.length-1].x;

      y2 = pointArray[pointArray.length-1].y;

      s = new double[pointArray.length];

      t = new double[pointArray.length];

      s[0] = 0;

      t[0] = 0;

      double d = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);

      for (int i = 1; i < pointArray.length; i++) {

       s[i] = ( (x2-x1)*(pointArray[i].x-x1) + (y2-y1)*(pointArray[i].y-y1)) / d;

      t[i] = ( (x2-x1)*(pointArray[i].y-y1) - (y2-y1)*(pointArray[i].x-x1)) / d;

      }

      repaint();

      }

  

      public void setRecursionLevel(int paramInt) {

      if (paramInt != recursionLevel) {

      recursionLevel = paramInt;

      repaint();

      }

      }

  

      protected void paintComponent(java.awt.Graphics paramGraphics) {

      super.paintComponent(paramGraphics);

      if (s != null) {

      paramGraphics.setColor(java.awt.Color.BLACK);

      paramGraphics.fillOval(x1 - 4, y1 - 4, 7, 7);

      paramGraphics.fillOval(x2 - 4, y2 - 4, 7, 7);

      drawLines(paramGraphics, recursionLevel, x1, y1, x2, y2);

      }

      }

  

      private void drawLines(Graphics paramGraphics, int n, double x1, double y1, double x2, double y2)

      {

      if (n <= 0) {

      paramGraphics.drawLine((int)x1, (int)y1, (int)x2, (int)y2);

      } else {

      double d1 = x1;

      double d2 = y1;

      for (int i = 1; i < s.length; i++)

      {

      double d3 = x1 + s[i] * (x2 - x1) - t[i] * (y2 - y1);

      double d4 = y1 + t[i] * (x2 - x1) + s[i] * (y2 - y1);

      drawLines(paramGraphics, n - 1, d1, d2, d3, d4);

      d1 = d3;

      d2 = d4;

      }

      }

      }

   }
